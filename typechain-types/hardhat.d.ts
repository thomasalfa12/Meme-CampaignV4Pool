/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ExampleSwapFeeHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleSwapFeeHook__factory>;
    getContractFactory(
      name: "Hook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hook__factory>;
    getContractFactory(
      name: "IHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHook__factory>;
    getContractFactory(
      name: "IMemeCampaignManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMemeCampaignManager__factory>;
    getContractFactory(
      name: "IUniswapV4Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV4Factory__factory>;
    getContractFactory(
      name: "IUnlockerToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnlockerToken__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "MemeCampaignManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MemeCampaignManager__factory>;
    getContractFactory(
      name: "UnlockerToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UnlockerToken__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ExampleSwapFeeHook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleSwapFeeHook>;
    getContractAt(
      name: "Hook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Hook>;
    getContractAt(
      name: "IHook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHook>;
    getContractAt(
      name: "IMemeCampaignManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMemeCampaignManager>;
    getContractAt(
      name: "IUniswapV4Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV4Factory>;
    getContractAt(
      name: "IUnlockerToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnlockerToken>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "MemeCampaignManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MemeCampaignManager>;
    getContractAt(
      name: "UnlockerToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UnlockerToken>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ExampleSwapFeeHook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExampleSwapFeeHook>;
    deployContract(
      name: "Hook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Hook>;
    deployContract(
      name: "IHook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHook>;
    deployContract(
      name: "IMemeCampaignManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMemeCampaignManager>;
    deployContract(
      name: "IUniswapV4Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV4Factory>;
    deployContract(
      name: "IUnlockerToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUnlockerToken>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "MemeCampaignManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MemeCampaignManager>;
    deployContract(
      name: "UnlockerToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UnlockerToken>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ExampleSwapFeeHook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExampleSwapFeeHook>;
    deployContract(
      name: "Hook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Hook>;
    deployContract(
      name: "IHook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHook>;
    deployContract(
      name: "IMemeCampaignManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMemeCampaignManager>;
    deployContract(
      name: "IUniswapV4Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV4Factory>;
    deployContract(
      name: "IUnlockerToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUnlockerToken>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "MemeCampaignManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MemeCampaignManager>;
    deployContract(
      name: "UnlockerToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UnlockerToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
