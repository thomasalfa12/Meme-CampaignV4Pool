/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ExampleSwapFeeHookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "afterBurn"
      | "afterMint"
      | "afterSwap"
      | "beforeBurn"
      | "beforeMint"
      | "beforeSwap"
      | "manager"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "HookCalled"): EventFragment;

  encodeFunctionData(
    functionFragment: "afterBurn",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterMint",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterSwap",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeBurn",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeMint",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSwap",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;

  decodeFunctionResult(functionFragment: "afterBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
}

export namespace HookCalledEvent {
  export type InputTuple = [
    name: string,
    sender: AddressLike,
    recipientOrZero: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    sender: string,
    recipientOrZero: string,
    amount: bigint
  ];
  export interface OutputObject {
    name: string;
    sender: string;
    recipientOrZero: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExampleSwapFeeHook extends BaseContract {
  connect(runner?: ContractRunner | null): ExampleSwapFeeHook;
  waitForDeployment(): Promise<this>;

  interface: ExampleSwapFeeHookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  afterBurn: TypedContractMethod<
    [sender: AddressLike, liquidity: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  afterMint: TypedContractMethod<
    [sender: AddressLike, liquidity: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  afterSwap: TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      arg3: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  beforeBurn: TypedContractMethod<
    [sender: AddressLike, liquidity: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  beforeMint: TypedContractMethod<
    [sender: AddressLike, liquidity: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  beforeSwap: TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      arg3: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  manager: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "afterBurn"
  ): TypedContractMethod<
    [sender: AddressLike, liquidity: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterMint"
  ): TypedContractMethod<
    [sender: AddressLike, liquidity: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterSwap"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      arg3: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeBurn"
  ): TypedContractMethod<
    [sender: AddressLike, liquidity: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeMint"
  ): TypedContractMethod<
    [sender: AddressLike, liquidity: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeSwap"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      arg3: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "HookCalled"
  ): TypedContractEvent<
    HookCalledEvent.InputTuple,
    HookCalledEvent.OutputTuple,
    HookCalledEvent.OutputObject
  >;

  filters: {
    "HookCalled(string,address,address,uint128)": TypedContractEvent<
      HookCalledEvent.InputTuple,
      HookCalledEvent.OutputTuple,
      HookCalledEvent.OutputObject
    >;
    HookCalled: TypedContractEvent<
      HookCalledEvent.InputTuple,
      HookCalledEvent.OutputTuple,
      HookCalledEvent.OutputObject
    >;
  };
}
