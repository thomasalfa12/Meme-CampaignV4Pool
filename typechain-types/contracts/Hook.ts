/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HookInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "afterBurn"
      | "afterMint"
      | "afterSwap"
      | "beforeBurn"
      | "beforeMint"
      | "beforeSwap"
      | "expectedPool"
      | "memeCampaignManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "afterBurn",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterMint",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "afterSwap",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeBurn",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeMint",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSwap",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expectedPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memeCampaignManager",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "afterBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expectedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memeCampaignManager",
    data: BytesLike
  ): Result;
}

export interface Hook extends BaseContract {
  connect(runner?: ContractRunner | null): Hook;
  waitForDeployment(): Promise<this>;

  interface: HookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  afterBurn: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  afterMint: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  afterSwap: TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  beforeBurn: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  beforeMint: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  beforeSwap: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [void],
    "nonpayable"
  >;

  expectedPool: TypedContractMethod<[], [string], "view">;

  memeCampaignManager: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "afterBurn"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterMint"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterSwap"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeBurn"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeMint"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeSwap"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "expectedPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "memeCampaignManager"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
