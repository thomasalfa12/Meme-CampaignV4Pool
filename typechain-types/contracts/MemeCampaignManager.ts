/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MemeCampaignManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE"
      | "TICK_SPACING"
      | "campaignCount"
      | "campaigns"
      | "contribute"
      | "createCampaign"
      | "devWallet"
      | "factory"
      | "finalizeCampaign"
      | "getCampaign"
      | "getCampaignSummaries"
      | "handlePostSwap"
      | "hook"
      | "weth"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CampaignCreated" | "Contributed" | "Finalized"
  ): EventFragment;

  encodeFunctionData(functionFragment: "FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TICK_SPACING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "devWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignSummaries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handlePostSwap",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hook", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TICK_SPACING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignSummaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlePostSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [campaignId: BigNumberish, creator: AddressLike];
  export type OutputTuple = [campaignId: bigint, creator: string];
  export interface OutputObject {
    campaignId: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    contributor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    contributor: string,
    amount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    contributor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    token: AddressLike,
    pool: AddressLike
  ];
  export type OutputTuple = [campaignId: bigint, token: string, pool: string];
  export interface OutputObject {
    campaignId: bigint;
    token: string;
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MemeCampaignManager extends BaseContract {
  connect(runner?: ContractRunner | null): MemeCampaignManager;
  waitForDeployment(): Promise<this>;

  interface: MemeCampaignManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE: TypedContractMethod<[], [bigint], "view">;

  TICK_SPACING: TypedContractMethod<[], [bigint], "view">;

  campaignCount: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        string
      ] & {
        name: string;
        symbol: string;
        creator: string;
        targetAmount: bigint;
        totalRaised: bigint;
        finalized: boolean;
        mode: bigint;
        token: string;
        pool: string;
      }
    ],
    "view"
  >;

  contribute: TypedContractMethod<[id: BigNumberish], [void], "payable">;

  createCampaign: TypedContractMethod<
    [
      name: string,
      symbol: string,
      targetAmount: BigNumberish,
      mode: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  devWallet: TypedContractMethod<[], [string], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  finalizeCampaign: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCampaign: TypedContractMethod<
    [id: BigNumberish],
    [[string, string, string, bigint, bigint, boolean, bigint, string, string]],
    "view"
  >;

  getCampaignSummaries: TypedContractMethod<
    [],
    [[string[], string[], bigint[], bigint[], boolean[]]],
    "view"
  >;

  handlePostSwap: TypedContractMethod<
    [
      campaignId: BigNumberish,
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  hook: TypedContractMethod<[], [string], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TICK_SPACING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaignCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        bigint,
        string,
        string
      ] & {
        name: string;
        symbol: string;
        creator: string;
        targetAmount: bigint;
        totalRaised: bigint;
        finalized: boolean;
        mode: bigint;
        token: string;
        pool: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<[id: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      targetAmount: BigNumberish,
      mode: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "devWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finalizeCampaign"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [id: BigNumberish],
    [[string, string, string, bigint, bigint, boolean, bigint, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignSummaries"
  ): TypedContractMethod<
    [],
    [[string[], string[], bigint[], bigint[], boolean[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "handlePostSwap"
  ): TypedContractMethod<
    [
      campaignId: BigNumberish,
      sender: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Contributed"
  ): TypedContractEvent<
    ContributedEvent.InputTuple,
    ContributedEvent.OutputTuple,
    ContributedEvent.OutputObject
  >;
  getEvent(
    key: "Finalized"
  ): TypedContractEvent<
    FinalizedEvent.InputTuple,
    FinalizedEvent.OutputTuple,
    FinalizedEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(uint256,address)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "Contributed(uint256,address,uint256)": TypedContractEvent<
      ContributedEvent.InputTuple,
      ContributedEvent.OutputTuple,
      ContributedEvent.OutputObject
    >;
    Contributed: TypedContractEvent<
      ContributedEvent.InputTuple,
      ContributedEvent.OutputTuple,
      ContributedEvent.OutputObject
    >;

    "Finalized(uint256,address,address)": TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;
    Finalized: TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;
  };
}
