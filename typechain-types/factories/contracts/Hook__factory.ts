/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Hook, HookInterface } from "../../contracts/Hook";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_memeCampaignManager",
        type: "address",
      },
      {
        internalType: "address",
        name: "_expectedPool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "afterBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "afterMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "afterSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "beforeBurn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "beforeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "beforeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "expectedPool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "memeCampaignManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516104c33803806104c383398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516103fc6100c760003960008181610113015261014001526000818160a801526101f401526103fc6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635b135c681161005b5780635b135c68146100f9578063ab62b0621461008d578063ad115d461461008d578063d559d14d1461010e57600080fd5b8063132f3be81461008d57806319bb4bc3146100a35780632dbdb685146100e65780634ff4172d1461008d575b600080fd5b6100a161009b3660046102d6565b50505050565b005b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100a16100f4366004610337565b610135565b6100a1610107366004610337565b5050505050565b6100ca7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101a65760405162461bcd60e51b815260206004820152601260248201527113db9b1e481c1bdbdb0818d85b8818d85b1b60721b604482015260640160405180910390fd5b60006101b4828401846103ad565b604051636521621960e11b8152600481018290526001600160a01b03888116602483015287811660448301526001600160801b03871660648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063ca42c43290608401600060405180830381600087803b15801561023a57600080fd5b505af115801561024e573d6000803e3d6000fd5b50505050505050505050565b80356001600160a01b038116811461027157600080fd5b919050565b80356001600160801b038116811461027157600080fd5b60008083601f84011261029f57600080fd5b50813567ffffffffffffffff8111156102b757600080fd5b6020830191508360208285010111156102cf57600080fd5b9250929050565b600080600080606085870312156102ec57600080fd5b6102f58561025a565b935061030360208601610276565b9250604085013567ffffffffffffffff81111561031f57600080fd5b61032b8782880161028d565b95989497509550505050565b60008060008060006080868803121561034f57600080fd5b6103588661025a565b94506103666020870161025a565b935061037460408701610276565b9250606086013567ffffffffffffffff81111561039057600080fd5b61039c8882890161028d565b969995985093965092949392505050565b6000602082840312156103bf57600080fd5b503591905056fea2646970667358221220e873a16bd9d7455e9a00a2d022f2b0764a6a0423b20639cc0c445b241ea7e02f64736f6c634300081c0033";

type HookConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HookConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Hook__factory extends ContractFactory {
  constructor(...args: HookConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _memeCampaignManager: AddressLike,
    _expectedPool: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _memeCampaignManager,
      _expectedPool,
      overrides || {}
    );
  }
  override deploy(
    _memeCampaignManager: AddressLike,
    _expectedPool: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _memeCampaignManager,
      _expectedPool,
      overrides || {}
    ) as Promise<
      Hook & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Hook__factory {
    return super.connect(runner) as Hook__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HookInterface {
    return new Interface(_abi) as HookInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Hook {
    return new Contract(address, _abi, runner) as unknown as Hook;
  }
}
